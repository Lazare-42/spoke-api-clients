/*
spoke_handler

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	Id int32 `json:"id"`
	GoogleId string `json:"google_id"`
	Name string `json:"name"`
	AccountId int32 `json:"account_id"`
	MeetingUrl string `json:"meeting_url"`
	StartTime SystemTime `json:"start_time"`
	CalendarId int32 `json:"calendar_id"`
	Attendees interface{} `json:"attendees"`
	Record bool `json:"record"`
	IsOrganizer bool `json:"is_organizer"`
	EndTime SystemTime `json:"end_time"`
	Status EventStatus `json:"status"`
	Error NullableString `json:"error,omitempty"`
	SessionId NullableString `json:"session_id,omitempty"`
	ProjectId NullableInt32 `json:"project_id,omitempty"`
	RefuseRecordingBy NullableString `json:"refuse_recording_by,omitempty"`
	DeleteToken string `json:"delete_token"`
	RecurringEventId NullableString `json:"recurring_event_id,omitempty"`
	IsRecurring bool `json:"is_recurring"`
	AgendaId NullableInt32 `json:"agenda_id,omitempty"`
	Uuid string `json:"uuid"`
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(id int32, googleId string, name string, accountId int32, meetingUrl string, startTime SystemTime, calendarId int32, attendees interface{}, record bool, isOrganizer bool, endTime SystemTime, status EventStatus, deleteToken string, isRecurring bool, uuid string) *Event {
	this := Event{}
	this.Id = id
	this.GoogleId = googleId
	this.Name = name
	this.AccountId = accountId
	this.MeetingUrl = meetingUrl
	this.StartTime = startTime
	this.CalendarId = calendarId
	this.Attendees = attendees
	this.Record = record
	this.IsOrganizer = isOrganizer
	this.EndTime = endTime
	this.Status = status
	this.DeleteToken = deleteToken
	this.IsRecurring = isRecurring
	this.Uuid = uuid
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetId returns the Id field value
func (o *Event) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Event) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Event) SetId(v int32) {
	o.Id = v
}

// GetGoogleId returns the GoogleId field value
func (o *Event) GetGoogleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GoogleId
}

// GetGoogleIdOk returns a tuple with the GoogleId field value
// and a boolean to check if the value has been set.
func (o *Event) GetGoogleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoogleId, true
}

// SetGoogleId sets field value
func (o *Event) SetGoogleId(v string) {
	o.GoogleId = v
}

// GetName returns the Name field value
func (o *Event) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Event) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Event) SetName(v string) {
	o.Name = v
}

// GetAccountId returns the AccountId field value
func (o *Event) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Event) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Event) SetAccountId(v int32) {
	o.AccountId = v
}

// GetMeetingUrl returns the MeetingUrl field value
func (o *Event) GetMeetingUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeetingUrl
}

// GetMeetingUrlOk returns a tuple with the MeetingUrl field value
// and a boolean to check if the value has been set.
func (o *Event) GetMeetingUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeetingUrl, true
}

// SetMeetingUrl sets field value
func (o *Event) SetMeetingUrl(v string) {
	o.MeetingUrl = v
}

// GetStartTime returns the StartTime field value
func (o *Event) GetStartTime() SystemTime {
	if o == nil {
		var ret SystemTime
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Event) GetStartTimeOk() (*SystemTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Event) SetStartTime(v SystemTime) {
	o.StartTime = v
}

// GetCalendarId returns the CalendarId field value
func (o *Event) GetCalendarId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CalendarId
}

// GetCalendarIdOk returns a tuple with the CalendarId field value
// and a boolean to check if the value has been set.
func (o *Event) GetCalendarIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalendarId, true
}

// SetCalendarId sets field value
func (o *Event) SetCalendarId(v int32) {
	o.CalendarId = v
}

// GetAttendees returns the Attendees field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Event) GetAttendees() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetAttendeesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return &o.Attendees, true
}

// SetAttendees sets field value
func (o *Event) SetAttendees(v interface{}) {
	o.Attendees = v
}

// GetRecord returns the Record field value
func (o *Event) GetRecord() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *Event) GetRecordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *Event) SetRecord(v bool) {
	o.Record = v
}

// GetIsOrganizer returns the IsOrganizer field value
func (o *Event) GetIsOrganizer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOrganizer
}

// GetIsOrganizerOk returns a tuple with the IsOrganizer field value
// and a boolean to check if the value has been set.
func (o *Event) GetIsOrganizerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOrganizer, true
}

// SetIsOrganizer sets field value
func (o *Event) SetIsOrganizer(v bool) {
	o.IsOrganizer = v
}

// GetEndTime returns the EndTime field value
func (o *Event) GetEndTime() SystemTime {
	if o == nil {
		var ret SystemTime
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Event) GetEndTimeOk() (*SystemTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Event) SetEndTime(v SystemTime) {
	o.EndTime = v
}

// GetStatus returns the Status field value
func (o *Event) GetStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Event) GetStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Event) SetStatus(v EventStatus) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *Event) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *Event) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *Event) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *Event) UnsetError() {
	o.Error.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetSessionId() string {
	if o == nil || IsNil(o.SessionId.Get()) {
		var ret string
		return ret
	}
	return *o.SessionId.Get()
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionId.Get(), o.SessionId.IsSet()
}

// HasSessionId returns a boolean if a field has been set.
func (o *Event) HasSessionId() bool {
	if o != nil && o.SessionId.IsSet() {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given NullableString and assigns it to the SessionId field.
func (o *Event) SetSessionId(v string) {
	o.SessionId.Set(&v)
}
// SetSessionIdNil sets the value for SessionId to be an explicit nil
func (o *Event) SetSessionIdNil() {
	o.SessionId.Set(nil)
}

// UnsetSessionId ensures that no value is present for SessionId, not even an explicit nil
func (o *Event) UnsetSessionId() {
	o.SessionId.Unset()
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *Event) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt32 and assigns it to the ProjectId field.
func (o *Event) SetProjectId(v int32) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *Event) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *Event) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetRefuseRecordingBy returns the RefuseRecordingBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetRefuseRecordingBy() string {
	if o == nil || IsNil(o.RefuseRecordingBy.Get()) {
		var ret string
		return ret
	}
	return *o.RefuseRecordingBy.Get()
}

// GetRefuseRecordingByOk returns a tuple with the RefuseRecordingBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetRefuseRecordingByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefuseRecordingBy.Get(), o.RefuseRecordingBy.IsSet()
}

// HasRefuseRecordingBy returns a boolean if a field has been set.
func (o *Event) HasRefuseRecordingBy() bool {
	if o != nil && o.RefuseRecordingBy.IsSet() {
		return true
	}

	return false
}

// SetRefuseRecordingBy gets a reference to the given NullableString and assigns it to the RefuseRecordingBy field.
func (o *Event) SetRefuseRecordingBy(v string) {
	o.RefuseRecordingBy.Set(&v)
}
// SetRefuseRecordingByNil sets the value for RefuseRecordingBy to be an explicit nil
func (o *Event) SetRefuseRecordingByNil() {
	o.RefuseRecordingBy.Set(nil)
}

// UnsetRefuseRecordingBy ensures that no value is present for RefuseRecordingBy, not even an explicit nil
func (o *Event) UnsetRefuseRecordingBy() {
	o.RefuseRecordingBy.Unset()
}

// GetDeleteToken returns the DeleteToken field value
func (o *Event) GetDeleteToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeleteToken
}

// GetDeleteTokenOk returns a tuple with the DeleteToken field value
// and a boolean to check if the value has been set.
func (o *Event) GetDeleteTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteToken, true
}

// SetDeleteToken sets field value
func (o *Event) SetDeleteToken(v string) {
	o.DeleteToken = v
}

// GetRecurringEventId returns the RecurringEventId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetRecurringEventId() string {
	if o == nil || IsNil(o.RecurringEventId.Get()) {
		var ret string
		return ret
	}
	return *o.RecurringEventId.Get()
}

// GetRecurringEventIdOk returns a tuple with the RecurringEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetRecurringEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringEventId.Get(), o.RecurringEventId.IsSet()
}

// HasRecurringEventId returns a boolean if a field has been set.
func (o *Event) HasRecurringEventId() bool {
	if o != nil && o.RecurringEventId.IsSet() {
		return true
	}

	return false
}

// SetRecurringEventId gets a reference to the given NullableString and assigns it to the RecurringEventId field.
func (o *Event) SetRecurringEventId(v string) {
	o.RecurringEventId.Set(&v)
}
// SetRecurringEventIdNil sets the value for RecurringEventId to be an explicit nil
func (o *Event) SetRecurringEventIdNil() {
	o.RecurringEventId.Set(nil)
}

// UnsetRecurringEventId ensures that no value is present for RecurringEventId, not even an explicit nil
func (o *Event) UnsetRecurringEventId() {
	o.RecurringEventId.Unset()
}

// GetIsRecurring returns the IsRecurring field value
func (o *Event) GetIsRecurring() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRecurring
}

// GetIsRecurringOk returns a tuple with the IsRecurring field value
// and a boolean to check if the value has been set.
func (o *Event) GetIsRecurringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRecurring, true
}

// SetIsRecurring sets field value
func (o *Event) SetIsRecurring(v bool) {
	o.IsRecurring = v
}

// GetAgendaId returns the AgendaId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetAgendaId() int32 {
	if o == nil || IsNil(o.AgendaId.Get()) {
		var ret int32
		return ret
	}
	return *o.AgendaId.Get()
}

// GetAgendaIdOk returns a tuple with the AgendaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetAgendaIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgendaId.Get(), o.AgendaId.IsSet()
}

// HasAgendaId returns a boolean if a field has been set.
func (o *Event) HasAgendaId() bool {
	if o != nil && o.AgendaId.IsSet() {
		return true
	}

	return false
}

// SetAgendaId gets a reference to the given NullableInt32 and assigns it to the AgendaId field.
func (o *Event) SetAgendaId(v int32) {
	o.AgendaId.Set(&v)
}
// SetAgendaIdNil sets the value for AgendaId to be an explicit nil
func (o *Event) SetAgendaIdNil() {
	o.AgendaId.Set(nil)
}

// UnsetAgendaId ensures that no value is present for AgendaId, not even an explicit nil
func (o *Event) UnsetAgendaId() {
	o.AgendaId.Unset()
}

// GetUuid returns the Uuid field value
func (o *Event) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Event) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Event) SetUuid(v string) {
	o.Uuid = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["google_id"] = o.GoogleId
	toSerialize["name"] = o.Name
	toSerialize["account_id"] = o.AccountId
	toSerialize["meeting_url"] = o.MeetingUrl
	toSerialize["start_time"] = o.StartTime
	toSerialize["calendar_id"] = o.CalendarId
	if o.Attendees != nil {
		toSerialize["attendees"] = o.Attendees
	}
	toSerialize["record"] = o.Record
	toSerialize["is_organizer"] = o.IsOrganizer
	toSerialize["end_time"] = o.EndTime
	toSerialize["status"] = o.Status
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.SessionId.IsSet() {
		toSerialize["session_id"] = o.SessionId.Get()
	}
	if o.ProjectId.IsSet() {
		toSerialize["project_id"] = o.ProjectId.Get()
	}
	if o.RefuseRecordingBy.IsSet() {
		toSerialize["refuse_recording_by"] = o.RefuseRecordingBy.Get()
	}
	toSerialize["delete_token"] = o.DeleteToken
	if o.RecurringEventId.IsSet() {
		toSerialize["recurring_event_id"] = o.RecurringEventId.Get()
	}
	toSerialize["is_recurring"] = o.IsRecurring
	if o.AgendaId.IsSet() {
		toSerialize["agenda_id"] = o.AgendaId.Get()
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"google_id",
		"name",
		"account_id",
		"meeting_url",
		"start_time",
		"calendar_id",
		"attendees",
		"record",
		"is_organizer",
		"end_time",
		"status",
		"delete_token",
		"is_recurring",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


