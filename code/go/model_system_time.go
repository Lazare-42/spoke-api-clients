/*
spoke_handler

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SystemTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemTime{}

// SystemTime struct for SystemTime
type SystemTime struct {
	SecsSinceEpoch int32 `json:"secs_since_epoch"`
	NanosSinceEpoch int32 `json:"nanos_since_epoch"`
}

type _SystemTime SystemTime

// NewSystemTime instantiates a new SystemTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemTime(secsSinceEpoch int32, nanosSinceEpoch int32) *SystemTime {
	this := SystemTime{}
	this.SecsSinceEpoch = secsSinceEpoch
	this.NanosSinceEpoch = nanosSinceEpoch
	return &this
}

// NewSystemTimeWithDefaults instantiates a new SystemTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemTimeWithDefaults() *SystemTime {
	this := SystemTime{}
	return &this
}

// GetSecsSinceEpoch returns the SecsSinceEpoch field value
func (o *SystemTime) GetSecsSinceEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SecsSinceEpoch
}

// GetSecsSinceEpochOk returns a tuple with the SecsSinceEpoch field value
// and a boolean to check if the value has been set.
func (o *SystemTime) GetSecsSinceEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecsSinceEpoch, true
}

// SetSecsSinceEpoch sets field value
func (o *SystemTime) SetSecsSinceEpoch(v int32) {
	o.SecsSinceEpoch = v
}

// GetNanosSinceEpoch returns the NanosSinceEpoch field value
func (o *SystemTime) GetNanosSinceEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NanosSinceEpoch
}

// GetNanosSinceEpochOk returns a tuple with the NanosSinceEpoch field value
// and a boolean to check if the value has been set.
func (o *SystemTime) GetNanosSinceEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NanosSinceEpoch, true
}

// SetNanosSinceEpoch sets field value
func (o *SystemTime) SetNanosSinceEpoch(v int32) {
	o.NanosSinceEpoch = v
}

func (o SystemTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secs_since_epoch"] = o.SecsSinceEpoch
	toSerialize["nanos_since_epoch"] = o.NanosSinceEpoch
	return toSerialize, nil
}

func (o *SystemTime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secs_since_epoch",
		"nanos_since_epoch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSystemTime := _SystemTime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSystemTime)

	if err != nil {
		return err
	}

	*o = SystemTime(varSystemTime)

	return err
}

type NullableSystemTime struct {
	value *SystemTime
	isSet bool
}

func (v NullableSystemTime) Get() *SystemTime {
	return v.value
}

func (v *NullableSystemTime) Set(val *SystemTime) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemTime) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemTime(val *SystemTime) *NullableSystemTime {
	return &NullableSystemTime{value: val, isSet: true}
}

func (v NullableSystemTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


