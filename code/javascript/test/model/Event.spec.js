/**
 * spoke_handler
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpokeHandler);
  }
}(this, function(expect, SpokeHandler) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpokeHandler.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be.a(SpokeHandler.Event);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property googleId (base name: "google_id")', function() {
      // uncomment below and update the code to test the property googleId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "account_id")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property meetingUrl (base name: "meeting_url")', function() {
      // uncomment below and update the code to test the property meetingUrl
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property calendarId (base name: "calendar_id")', function() {
      // uncomment below and update the code to test the property calendarId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property attendees (base name: "attendees")', function() {
      // uncomment below and update the code to test the property attendees
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property record (base name: "record")', function() {
      // uncomment below and update the code to test the property record
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property isOrganizer (base name: "is_organizer")', function() {
      // uncomment below and update the code to test the property isOrganizer
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "end_time")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "session_id")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "project_id")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property refuseRecordingBy (base name: "refuse_recording_by")', function() {
      // uncomment below and update the code to test the property refuseRecordingBy
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property deleteToken (base name: "delete_token")', function() {
      // uncomment below and update the code to test the property deleteToken
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property recurringEventId (base name: "recurring_event_id")', function() {
      // uncomment below and update the code to test the property recurringEventId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property isRecurring (base name: "is_recurring")', function() {
      // uncomment below and update the code to test the property isRecurring
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property agendaId (base name: "agenda_id")', function() {
      // uncomment below and update the code to test the property agendaId
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new SpokeHandler.Event();
      //expect(instance).to.be();
    });

  });

}));
