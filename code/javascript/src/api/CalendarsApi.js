/**
 * spoke_handler
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCalendarParams from '../model/CreateCalendarParams';

/**
* Calendars service.
* @module api/CalendarsApi
* @version 0.2.0
*/
export default class CalendarsApi {

    /**
    * Constructs a new CalendarsApi. 
    * @alias module:api/CalendarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calendarCalendarsCreateCalendar operation.
     * @callback module:api/CalendarsApi~calendarCalendarsCreateCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * synchronize all events of a new calendar
     * @param {module:model/CreateCalendarParams} createCalendarParams 
     * @param {module:api/CalendarsApi~calendarCalendarsCreateCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarCalendarsCreateCalendar(createCalendarParams, callback) {
      let postBody = createCalendarParams;
      // verify the required parameter 'createCalendarParams' is set
      if (createCalendarParams === undefined || createCalendarParams === null) {
        throw new Error("Missing the required parameter 'createCalendarParams' when calling calendarCalendarsCreateCalendar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarCalendarsDeleteCalendar operation.
     * @callback module:api/CalendarsApi~calendarCalendarsDeleteCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/CalendarsApi~calendarCalendarsDeleteCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarCalendarsDeleteCalendar(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling calendarCalendarsDeleteCalendar");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarCalendarsGetCalendar operation.
     * @callback module:api/CalendarsApi~calendarCalendarsGetCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/CalendarsApi~calendarCalendarsGetCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarCalendarsGetCalendar(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling calendarCalendarsGetCalendar");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarCalendarsListCalendars operation.
     * @callback module:api/CalendarsApi~calendarCalendarsListCalendarsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CalendarsApi~calendarCalendarsListCalendarsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarCalendarsListCalendars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarCalendarsUpdateCalendar operation.
     * @callback module:api/CalendarsApi~calendarCalendarsUpdateCalendarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/CalendarsApi~calendarCalendarsUpdateCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarCalendarsUpdateCalendar(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling calendarCalendarsUpdateCalendar");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
