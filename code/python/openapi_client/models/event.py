# coding: utf-8

"""
    spoke_handler

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_status import EventStatus
from openapi_client.models.system_time import SystemTime
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Event
    """ # noqa: E501
    id: StrictInt
    google_id: StrictStr
    name: StrictStr
    account_id: StrictInt
    meeting_url: StrictStr
    start_time: SystemTime
    calendar_id: StrictInt
    attendees: Optional[Any]
    record: StrictBool
    is_organizer: StrictBool
    end_time: SystemTime
    status: EventStatus
    error: Optional[StrictStr] = None
    session_id: Optional[StrictStr] = None
    project_id: Optional[StrictInt] = None
    refuse_recording_by: Optional[StrictStr] = None
    delete_token: StrictStr
    recurring_event_id: Optional[StrictStr] = None
    is_recurring: StrictBool
    agenda_id: Optional[StrictInt] = None
    uuid: StrictStr
    __properties: ClassVar[List[str]] = ["id", "google_id", "name", "account_id", "meeting_url", "start_time", "calendar_id", "attendees", "record", "is_organizer", "end_time", "status", "error", "session_id", "project_id", "refuse_recording_by", "delete_token", "recurring_event_id", "is_recurring", "agenda_id", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_time
        if self.start_time:
            _dict['start_time'] = self.start_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_time
        if self.end_time:
            _dict['end_time'] = self.end_time.to_dict()
        # set to None if attendees (nullable) is None
        # and model_fields_set contains the field
        if self.attendees is None and "attendees" in self.model_fields_set:
            _dict['attendees'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if refuse_recording_by (nullable) is None
        # and model_fields_set contains the field
        if self.refuse_recording_by is None and "refuse_recording_by" in self.model_fields_set:
            _dict['refuse_recording_by'] = None

        # set to None if recurring_event_id (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_event_id is None and "recurring_event_id" in self.model_fields_set:
            _dict['recurring_event_id'] = None

        # set to None if agenda_id (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_id is None and "agenda_id" in self.model_fields_set:
            _dict['agenda_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "google_id": obj.get("google_id"),
            "name": obj.get("name"),
            "account_id": obj.get("account_id"),
            "meeting_url": obj.get("meeting_url"),
            "start_time": SystemTime.from_dict(obj["start_time"]) if obj.get("start_time") is not None else None,
            "calendar_id": obj.get("calendar_id"),
            "attendees": obj.get("attendees"),
            "record": obj.get("record"),
            "is_organizer": obj.get("is_organizer"),
            "end_time": SystemTime.from_dict(obj["end_time"]) if obj.get("end_time") is not None else None,
            "status": obj.get("status"),
            "error": obj.get("error"),
            "session_id": obj.get("session_id"),
            "project_id": obj.get("project_id"),
            "refuse_recording_by": obj.get("refuse_recording_by"),
            "delete_token": obj.get("delete_token"),
            "recurring_event_id": obj.get("recurring_event_id"),
            "is_recurring": obj.get("is_recurring"),
            "agenda_id": obj.get("agenda_id"),
            "uuid": obj.get("uuid")
        })
        return _obj


