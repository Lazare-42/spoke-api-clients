/*
 * spoke_handler
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "google_id")]
    pub google_id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "account_id")]
    pub account_id: i32,
    #[serde(rename = "meeting_url")]
    pub meeting_url: String,
    #[serde(rename = "start_time")]
    pub start_time: Box<models::SystemTime>,
    #[serde(rename = "calendar_id")]
    pub calendar_id: i32,
    #[serde(rename = "attendees", deserialize_with = "Option::deserialize")]
    pub attendees: Option<serde_json::Value>,
    #[serde(rename = "record")]
    pub record: bool,
    #[serde(rename = "is_organizer")]
    pub is_organizer: bool,
    #[serde(rename = "end_time")]
    pub end_time: Box<models::SystemTime>,
    #[serde(rename = "status")]
    pub status: models::EventStatus,
    #[serde(rename = "error", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error: Option<Option<String>>,
    #[serde(rename = "session_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<Option<String>>,
    #[serde(rename = "project_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<Option<i32>>,
    #[serde(rename = "refuse_recording_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refuse_recording_by: Option<Option<String>>,
    #[serde(rename = "delete_token")]
    pub delete_token: String,
    #[serde(rename = "recurring_event_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recurring_event_id: Option<Option<String>>,
    #[serde(rename = "is_recurring")]
    pub is_recurring: bool,
    #[serde(rename = "agenda_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agenda_id: Option<Option<i32>>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
}

impl Event {
    pub fn new(id: i32, google_id: String, name: String, account_id: i32, meeting_url: String, start_time: models::SystemTime, calendar_id: i32, attendees: Option<serde_json::Value>, record: bool, is_organizer: bool, end_time: models::SystemTime, status: models::EventStatus, delete_token: String, is_recurring: bool, uuid: uuid::Uuid) -> Event {
        Event {
            id,
            google_id,
            name,
            account_id,
            meeting_url,
            start_time: Box::new(start_time),
            calendar_id,
            attendees,
            record,
            is_organizer,
            end_time: Box::new(end_time),
            status,
            error: None,
            session_id: None,
            project_id: None,
            refuse_recording_by: None,
            delete_token,
            recurring_event_id: None,
            is_recurring,
            agenda_id: None,
            uuid,
        }
    }
}

